import argparse


def get_parser():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("--num_workers", type=int, default=0, help="number of worker")
    parser.add_argument("--num_gpus", type=float, default=1, help="number of gpu")
    parser.add_argument("--num_envs_per_worker", type=int, default=1)
    parser.add_argument("--num_gpus_per_worker", type=float, default=0.0)
    parser.add_argument("--num_cpus_per_worker", type=float, default=0.0)
    parser.add_argument("--num_sgd_iter", type=int, default=3)
    parser.add_argument("--sgd_minibatch_size", type=int, default=128)
    parser.add_argument("--train_batch_size", type=int, default=8192)
    parser.add_argument("--complete_episodes", action="store_true")
    parser.add_argument("--rollout_fragment_length", type=int, default=128)
    parser.add_argument("--clip_param", type=float, default=0.2)
    parser.add_argument("--vf_clip_param", type=float, default=2.0)
    parser.add_argument("--vf_loss_coeff", type=float, default=0.5)
    parser.add_argument("--kl_coeff", type=float, default=0.2)
    parser.add_argument("--entropy_coeff", type=float, default=0.001)
    parser.add_argument("--lr", type=float, default=1e-4)
    parser.add_argument("--lambda", type=float, default=0.95)
    parser.add_argument("--gamma", type=float, default=0.999)
    parser.add_argument("--training_iteration", type=int, default=1000)
    parser.add_argument("--checkpoint_freq", type=int, default=10)
    parser.add_argument("--name", type=str, default="experiment")
    parser.add_argument("--game_state_file", type=str, default=None)
    parser.add_argument("--render", action="store_true")
    parser.add_argument("--local_mode", action="store_true")
    parser.add_argument("--resume", action="store_true")
    parser.add_argument("--restore", type=str, default=None)
    parser.add_argument("--num_samples", type=int, default=1)
    parser.add_argument("--perturbation_interval", type=int, default=10)
    parser.add_argument("--evaluation_num_episodes", type=int, default=10)
    parser.add_argument("--evaluation_interval", type=int, default=None)
    parser.add_argument("--queue_trials", action="store_true")
    parser.add_argument("--time_attr", type=str, default="timesteps_total")
    parser.add_argument("--validate", action="store_true")
    parser.add_argument("--pbt", action="store_true")
    parser.add_argument("--use_rnd", action="store_true")
    parser.add_argument("--populations", type=int, default=2)
    parser.add_argument("--env", type=str, default="v0")
    parser.add_argument("--kl_target", type=float, default=0.01)
    parser.add_argument("--timesteps_total", type=int, default=1000000000)
    parser.add_argument("--filter", type=str, default="MeanStdFilter")
    parser.add_argument("--custom_model", type=str)
    parser.add_argument("--env_id", type=str)
    parser.add_argument("--center", action="store_true")
    parser.add_argument("--input_size", type=int, default=11)
    parser.add_argument("--enemy", type=str, default="static")
    parser.add_argument("--alpha_coeff", type=float, default=1.2)
    parser.add_argument("--ready_num_steps", type=int, default=1e8)
    parser.add_argument("--burn_in", type=int, default=1e8)
    parser.add_argument("--exploration_steps", type=int, default=1e6)
    parser.add_argument("--n_histories", type=int, default=4)
    parser.add_argument("--full_conv", action="store_true")
    parser.add_argument("--max_seq_len", type=int, default=50)

    return parser
